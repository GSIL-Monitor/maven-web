<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--包扫描-->
    <context:component-scan base-package="com.gxp.service"/>

    <!-- 配置调度程序quartz ，其中配置JobDetail有两种方式 -->
    <!--方式一：使用JobDetailBean，任务类必须实现Job接口 -->
    <bean id="one" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="name" value="exampleJob"></property>
        <property name="jobClass" value="com.gxp.quartz.QuartzMethodOne"></property>
        <!--  在这个例子中，jobDataAsMap没有用，此目标类中接受的参数 ,若参数为service，则可以在此进行参数配置，类似struts2 -->
        <property name="jobDataAsMap">
            <map>
                <entry key="service">
                    <value>simple is the beat</value>
                </entry>
            </map>
        </property>
    </bean>


    <!-- 方式二：使用MethodInvokingJobDetailFactoryBean，任务类可以不实现Job接口，通过targetMethod指定调用方法-->
    <!-- 定义目标bean和bean中的方法 -->
    <bean id="quartzMethodTwo" class="com.gxp.quartz.QuartzMethodTwo"/>
    <bean id="two" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="quartzMethodTwo"/>
        </property>
        <property name="targetMethod">
            <!-- 要执行的方法名称 -->
            <value>execute</value>
        </property>
    </bean>


    <!-- =====================方法一：调度触发器 ======================== -->
    <!-- 定义simpleTrigger触发器 -->
    <!--
    <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="jobDetail"></property>
        <property name="repeatCount">
            <value>8</value>
        </property>
        <property name="repeatInterval">
            <value>1000</value>
        </property>
        <property name="startDelay">
            <value>4</value>
        </property>
    </bean>
    -->
    <!-- 另一种触发器是CornTrigger -->
    <bean id="oneCornTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="one"/>
        <!-- 每个10秒触发 -->
        <property name="cronExpression" value="0/5 * * * * ?"/>
    </bean>

    <!-- ======================== 方法二：调度触发器 ======================== -->
    <bean id="twoCornTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="two"/>
        <!-- 每个10秒触发 -->
        <property name="cronExpression" value="0/5 * * * * ?"/>
    </bean>


    <!-- ======================== 调度工厂 ======================== -->
    <bean id="SpringJobSchedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="oneCornTrigger"/>
                <ref bean="twoCornTrigger"/>
            </list>
        </property>
    </bean>

    <!--cache-->
    <bean id="cacheFactory" class="com.gxp.cache.CacheFactoryImpl"/>
    <bean id="cacheService" class="com.gxp.cache.CacheServiceImpl" init-method="init"/>
</beans>